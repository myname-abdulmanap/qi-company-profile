---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import CareersHeroSection from '../../components/CareersHeroSection.astro';
import { SITE_TITLE_CAREERS, SITE_DESCRIPTION_CAREERS } from '../../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';
import { ClientRouter } from 'astro:transitions';

const allPosts = await getCollection('blog');

const posts = allPosts
  .filter((post) => {
    const category = post.data.category;
    const status = post.data.status?.toLowerCase?.() || 'draft';

    const isCareer = Array.isArray(category)
      ? category.some((cat) => cat?.toLowerCase?.() === 'careers')
      : category?.toLowerCase?.() === 'careers';

    return isCareer && status === 'published';
  })
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());
---

<!doctype html>
<html lang="en">
  <BaseHead title={SITE_TITLE_CAREERS} description={SITE_DESCRIPTION_CAREERS} />
  <style>
    .blog-section {
      padding: 3rem 0 4rem;
      background-color: var(--bg-color);
    }

    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }

    .section-header {
      text-align: center;
      margin-bottom: 3rem;
    }

    .section-header h2 {
      font-size: 2.25rem;
      font-weight: 700;
      margin-bottom: 0.75rem;
      color: var(--heading-color);
      letter-spacing: -0.025em;
    }

    .section-header p {
      color: #64748b;
      font-size: 1.125rem;
      max-width: 600px;
      margin: 0 auto;
      line-height: 1.6;
    }

    /* Search Section */
    .search-section {
      margin-bottom: 3rem;
    }

    .search-container {
      max-width: 600px;
      margin: 0 auto;
      position: relative;
    }

    .search-wrapper {
      position: relative;
      display: flex;
      align-items: center;
      background: var(--bg-color);
      border: 1px solid rgba(226, 232, 240, 0.8);
      border-radius: 12px;
      overflow: hidden;
      transition: all 0.2s ease;
    }

    .search-wrapper:focus-within {
      border-color: rgba(59, 130, 246, 0.5);
      box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.1);
    }

    .search-input {
      flex: 1;
      padding: 1rem 1.25rem;
      border: none;
      outline: none;
      background: transparent;
      color: var(--text-color);
      font-size: 1rem;
      line-height: 1.5;
    }

    .search-input::placeholder {
      color: #94a3b8;
    }

    .clear-button {
      display: none;
      align-items: center;
      justify-content: center;
      width: 40px;
      height: 40px;
      margin: 0.5rem;
      border: none;
      background: rgba(148, 163, 184, 0.1);
      border-radius: 8px;
      cursor: pointer;
      transition: all 0.2s ease;
      color: #64748b;
    }

    .clear-button:hover {
      background: rgba(148, 163, 184, 0.2);
      color: #475569;
    }

    .clear-button.show {
      display: flex;
    }

    .search-meta {
      text-align: center;
      margin-top: 1rem;
      font-size: 0.875rem;
      color: #64748b;
    }

    /* Grid Layout */
    .careers-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
    }

    /* Card Styles */
    .career-card {
      background: var(--bg-color);
      border: 1px solid rgba(226, 232, 240, 0.6);
      border-radius: 16px;
      overflow: hidden;
      transition: all 0.3s ease;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.02);
    }

    .career-card:hover {
      transform: translateY(-4px);
      box-shadow: 0 12px 24px rgba(0, 0, 0, 0.08);
      border-color: rgba(226, 232, 240, 0.8);
    }

    .card-link {
      display: block;
      text-decoration: none;
      color: inherit;
      height: 100%;
    }

    .card-image {
      position: relative;
      height: 200px;
      overflow: hidden;
      background: linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%);
    }

    .card-image img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: transform 0.3s ease;
    }

    .career-card:hover .card-image img {
      transform: scale(1.05);
    }

    .card-content {
      padding: 1.5rem;
    }

    .post-meta {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      margin-bottom: 1rem;
      font-size: 0.875rem;
      color: #64748b;
    }

    .category-badge {
      background: rgba(59, 130, 246, 0.1);
      color: #3b82f6;
      padding: 0.25rem 0.75rem;
      border-radius: 6px;
      font-weight: 500;
      font-size: 0.75rem;
    }

    .post-date {
      color: #94a3b8;
    }

    .card-title {
      font-size: 1.25rem;
      font-weight: 600;
      color: var(--text-color);
      margin-bottom: 0.75rem;
      line-height: 1.4;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .card-description {
      color: #64748b;
      font-size: 0.95rem;
      line-height: 1.6;
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    /* Empty State */
    .empty-state {
      text-align: center;
      padding: 4rem 2rem;
      color: #94a3b8;
    }

    .empty-state h3 {
      font-size: 1.25rem;
      font-weight: 600;
      margin-bottom: 0.5rem;
      color: #64748b;
    }

    .empty-state p {
      font-size: 1rem;
      line-height: 1.6;
    }

    /* Animations */
    .fade-in {
      animation: fadeIn 0.6s ease forwards;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    /* Responsive Design */
    @media (max-width: 1024px) {
      .careers-grid {
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 1.25rem;
      }
      
      .card-image {
        height: 180px;
      }
    }

    @media (max-width: 768px) {
      .blog-section {
        padding: 2rem 0 3rem;
      }

      .section-header {
        margin-bottom: 2rem;
      }

      .section-header h2 {
        font-size: 1.875rem;
      }

      .section-header p {
        font-size: 1rem;
      }

      .search-section {
        margin-bottom: 2rem;
      }

      .careers-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
      }

      .card-image {
        height: 160px;
      }

      .card-content {
        padding: 1.25rem;
      }

      .card-title {
        font-size: 1.125rem;
      }

      .card-description {
        font-size: 0.875rem;
      }
    }

    @media (max-width: 480px) {
      .container {
        padding: 0 0.75rem;
      }

      .search-input {
        padding: 0.875rem 1rem;
        font-size: 0.95rem;
      }

      .card-content {
        padding: 1rem;
      }

      .section-header h2 {
        font-size: 1.5rem;
      }
    }
  </style>

  <body>
    <ClientRouter />
    <Header />
    <CareersHeroSection />

    <main>
      <section class="blog-section">
        <div class="container">
          <!-- Header -->
          <header class="section-header fade-in">
            <h2>Careers at Qualita Indonesia</h2>
            <p>Discover exciting career opportunities and grow with us in the world of innovative technology solutions.</p>
          </header>

          <!-- Search Section -->
          <div class="search-section fade-in">
            <div class="search-container">
              <div class="search-wrapper">
                <input
                  id="careerSearch"
                  class="search-input"
                  type="search"
                  placeholder="Search positions, skills, or departments..."
                  autocomplete="off"
                  spellcheck="false"
                />
                <button
                  id="clearButton"
                  class="clear-button"
                  type="button"
                  aria-label="Clear search"
                  title="Clear search"
                >
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                    <path d="M18 6L6 18M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                  </svg>
                </button>
              </div>
              <div id="searchMeta" class="search-meta" role="status" aria-live="polite"></div>
            </div>
          </div>

          <!-- Careers Grid -->
          <div id="careersGrid" class="careers-grid">
            {
              posts.map((post) => {
                const categoryArray = Array.isArray(post.data.category) 
                  ? post.data.category 
                  : [post.data.category].filter(Boolean);
                
                const searchContent = [
                  post.data.title ?? '',
                  post.data.description ?? '',
                  categoryArray.join(' '),
                  post.id
                ].join(' ').toLowerCase();

                const heroImage = post.data.heroImage ?? '/images/placeholder.jpg';
                
                return (
                  <article
                    class="career-card fade-in"
                    data-search={searchContent}
                  >
                    <a href={`/careers/${post.id}/`} class="card-link">
                      <div class="card-image">
                        <img
                          src={heroImage}
                          alt={post.data.title}
                          loading="lazy"
                          decoding="async"
                        />
                      </div>
                      <div class="card-content">
                        <div class="post-meta">
                          {categoryArray.length > 0 && (
                            <span class="category-badge">
                              {categoryArray[0]}
                            </span>
                          )}
                          <span class="post-date">
                            <FormattedDate date={post.data.pubDate} />
                          </span>
                        </div>
                        <h3 class="card-title">{post.data.title}</h3>
                        <p class="card-description">{post.data.description}</p>
                      </div>
                    </a>
                  </article>
                );
              })
            }
          </div>

          <!-- Empty State -->
          <div id="emptyState" class="empty-state" hidden>
            <h3>No positions found</h3>
            <p>Try adjusting your search terms or browse all available positions.</p>
          </div>
        </div>
      </section>
    </main>

    <Footer />

    <!-- Enhanced Search Functionality -->
    <script type="module">
      const searchInput = document.getElementById('careerSearch');
      const clearButton = document.getElementById('clearButton');
      const careersGrid = document.getElementById('careersGrid');
      const searchMeta = document.getElementById('searchMeta');
      const emptyState = document.getElementById('emptyState');
      const careerCards = Array.from(careersGrid.querySelectorAll('.career-card'));

      // Normalize text for better searching
      const normalizeText = (text) => {
        return (text || '')
          .toLowerCase()
          .normalize('NFD')
          .replace(/[\u0300-\u036f]/g, '')
          .trim();
      };

      // Debounce function for performance
      let searchTimeout;
      const debounceSearch = (callback, delay = 200) => {
        return (...args) => {
          clearTimeout(searchTimeout);
          searchTimeout = setTimeout(() => callback(...args), delay);
        };
      };

      // Update search results count
      function updateSearchMeta(visibleCount, totalCount) {
        const text = visibleCount === totalCount 
          ? `${totalCount} position${totalCount !== 1 ? 's' : ''} available`
          : `${visibleCount} of ${totalCount} position${totalCount !== 1 ? 's' : ''}`;
        
        searchMeta.textContent = text;
      }

      // Filter careers based on search query
      function filterCareers(query) {
        const normalizedQuery = normalizeText(query);
        let visibleCount = 0;

        // Show/hide clear button
        clearButton.classList.toggle('show', query.length > 0);

        // If no query, show all cards
        if (!normalizedQuery) {
          careerCards.forEach(card => {
            card.hidden = false;
            visibleCount++;
          });
          emptyState.hidden = true;
          updateSearchMeta(visibleCount, careerCards.length);
          return;
        }

        // Filter cards based on search content
        careerCards.forEach(card => {
          const searchData = normalizeText(card.dataset.search || '');
          const isMatch = searchData.includes(normalizedQuery);
          
          card.hidden = !isMatch;
          if (isMatch) visibleCount++;
        });

        // Show/hide empty state
        emptyState.hidden = visibleCount > 0;
        updateSearchMeta(visibleCount, careerCards.length);
      }

      // Create debounced filter function
      const debouncedFilter = debounceSearch((query) => filterCareers(query));

      // Event listeners
      searchInput.addEventListener('input', (e) => {
        debouncedFilter(e.target.value);
      });

      clearButton.addEventListener('click', () => {
        searchInput.value = '';
        searchInput.focus();
        filterCareers('');
      });

      // Keyboard shortcuts
      document.addEventListener('keydown', (e) => {
        // Focus search on "/" key
        if (e.key === '/' && !['INPUT', 'TEXTAREA'].includes(e.target.tagName)) {
          e.preventDefault();
          searchInput.focus();
        }
        
        // Clear search on Escape key
        if (e.key === 'Escape' && e.target === searchInput) {
          searchInput.value = '';
          filterCareers('');
          searchInput.blur();
        }
      });

      // Initialize
      updateSearchMeta(careerCards.length, careerCards.length);
    </script>
  </body>
</html>