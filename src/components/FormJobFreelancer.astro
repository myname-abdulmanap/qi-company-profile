
---
const { slug } = Astro.props;

function formatSlugForDisplay(slug) {
  return slug
    .split("-")
    .map((word) => word.replace(/\d+/g, "").trim())
    .filter((word) => word.length > 0)
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(" ");
}

const displayText = formatSlugForDisplay(slug);
---

<section class="freelancer-application" id="freelancer-application">
  <div class="freelancer-application-container">
    <div class="section-title fade-in">
      <br />
      <br />
      <h2>Freelancer Application</h2>
      <p>Join our freelance network at Qualita Indonesia</p>
      <p>Fill out the form below to apply for freelance positions</p>
    </div>

    <form
      class="freelancer-form fade-in"
      id="freelancer-form"
      enctype="multipart/form-data"
      data-astro-reload
    >
      <!-- Informasi Detail -->
      <div class="form-section">
        <h3 class="section-subtitle">Informasi Detail</h3>
        
        <div class="form-grid">
          <div class="form-group">
            <label for="nama">Nama *</label>
            <input
              type="text"
              id="nama"
              name="nama"
              placeholder="Masukkan nama lengkap"
              required
            />
          </div>
          
          <div class="form-group">
            <label for="jenisKelamin">Jenis Kelamin *</label>
            <select id="jenisKelamin" name="jenisKelamin" required>
              <option value="">Pilih jenis kelamin</option>
              <option value="Laki-laki">Laki-laki</option>
              <option value="Perempuan">Perempuan</option>
            </select>
          </div>
        </div>

        <div class="form-grid">
          <div class="form-group">
            <label for="noTelp">No Telp *</label>
            <input
              type="tel"
              id="noTelp"
              name="noTelp"
              placeholder="contoh: +62812345678 atau 08123456789"
              required
            />
          </div>
          
          <div class="form-group">
            <label for="tempatTanggalLahir">Tempat Tanggal Lahir *</label>
            <input
              type="text"
              id="tempatTanggalLahir"
              name="tempatTanggalLahir"
              placeholder="contoh: Jakarta, 15 Agustus 1990"
              required
            />
          </div>
        </div>

        <div class="form-group">
          <label for="alamatKTP">Alamat KTP *</label>
          <textarea
            id="alamatKTP"
            name="alamatKTP"
            placeholder="Masukkan alamat sesuai KTP"
            required></textarea>
        </div>

        <div class="form-group">
          <label for="alamatDomisili">Alamat Domisili *</label>
          <textarea
            id="alamatDomisili"
            name="alamatDomisili"
            placeholder="Masukkan alamat tempat tinggal saat ini"
            required></textarea>
          <button type="button" id="getLocationBtn" class="geolocation-btn">
            üìç Dapatkan Lokasi Saya
          </button>
          <div id="coordinatesInfo" class="coordinates-info" style="display: none;"></div>
        </div>

        <div class="form-grid">
          <div class="form-group">
            <label for="pendidikanTerakhir">Pendidikan Terakhir *</label>
            <select id="pendidikanTerakhir" name="pendidikanTerakhir" required>
              <option value="">Pilih pendidikan terakhir</option>
              <option value="SD">SD</option>
              <option value="SMP">SMP</option>
              <option value="SMA/SMK">SMA/SMK</option>
              <option value="D1">D1 (Diploma 1)</option>
              <option value="D2">D2 (Diploma 2)</option>
              <option value="D3">D3 (Diploma 3)</option>
              <option value="D4">D4 (Diploma 4)</option>
              <option value="S1">S1 (Sarjana)</option>
              <option value="S2">S2 (Magister)</option>
              <option value="S3">S3 (Doktor)</option>
            </select>
          </div>

          <div class="form-group">
            <label for="areaLowongan">Area Lowongan *</label>
            <select id="areaLowongan" name="areaLowongan" required>
              <option value="">Pilih area lowongan</option>
              <option value="Jakarta">Jakarta</option>
              <option value="Surabaya">Surabaya</option>
              <option value="Bandung">Bandung</option>
              <option value="Medan">Medan</option>
              <option value="Semarang">Semarang</option>
              <option value="Makassar">Makassar</option>
              <option value="Palembang">Palembang</option>
              <option value="Yogyakarta">Yogyakarta</option>
              <option value="Remote/Online">Remote/Online</option>
            </select>
          </div>
        </div>

        <div class="form-group">
          <label for="posisi">Posisi *</label>
          <select id="posisi" name="posisi" required>
            <option value="">Select Position</option>
            <option value={slug} selected>{displayText}</option>
          </select>
        </div>

        <div class="form-group">
          <label for="linkPortfolio">Link Portfolio</label>
          <input
            type="url"
            id="linkPortfolio"
            name="linkPortfolio"
            placeholder="https://portfolio-anda.com atau https://github.com/username"
          />
          <small class="form-note">Link ke portfolio, GitHub, LinkedIn, atau website pribadi Anda</small>
        </div>
      </div>

      <!-- Upload Dokumen -->
      <div class="form-section">
        <h3 class="section-subtitle">Upload Dokumen</h3>
        
        <div class="form-grid">
          <div class="form-group">
            <label for="ktp">KTP *</label>
            <div class="file-upload-container">
              <input
                type="file"
                id="ktp"
                name="ktp"
                accept=".pdf,.jpg,.jpeg,.png"
                class="file-input"
                required
              />
              <label for="ktp" class="file-label">
                <span class="file-icon">üÜî</span>
                <span class="file-text">Pilih file KTP</span>
              </label>
              <div class="file-info" id="ktp-info"></div>
            </div>
          </div>

          <div class="form-group">
            <label for="kk">Kartu Keluarga *</label>
            <div class="file-upload-container">
              <input
                type="file"
                id="kk"
                name="kk"
                accept=".pdf,.jpg,.jpeg,.png"
                class="file-input"
                required
              />
              <label for="kk" class="file-label">
                <span class="file-icon">üë•</span>
                <span class="file-text">Pilih file KK</span>
              </label>
              <div class="file-info" id="kk-info"></div>
            </div>
          </div>
        </div>

        <div class="form-grid">
          <div class="form-group">
            <label for="cv">CV *</label>
            <div class="file-upload-container">
              <input
                type="file"
                id="cv"
                name="cv"
                accept=".pdf,.doc,.docx"
                class="file-input"
                required
              />
              <label for="cv" class="file-label">
                <span class="file-icon">üìÑ</span>
                <span class="file-text">Pilih file CV</span>
              </label>
              <div class="file-info" id="cv-info"></div>
            </div>
          </div>

          <div class="form-group">
            <label for="ijazah">Ijazah Terakhir *</label>
            <div class="file-upload-container">
              <input
                type="file"
                id="ijazah"
                name="ijazah"
                accept=".pdf,.jpg,.jpeg,.png"
                class="file-input"
                required
              />
              <label for="ijazah" class="file-label">
                <span class="file-icon">üéì</span>
                <span class="file-text">Pilih file Ijazah</span>
              </label>
              <div class="file-info" id="ijazah-info"></div>
            </div>
          </div>
        </div>

        <small class="form-note">
          Format file yang diterima: PDF, JPG, JPEG, PNG. Maksimal ukuran file: 2MB
        </small>
      </div>

      <!-- Kontak Darurat -->
      <div class="form-section">
        <h3 class="section-subtitle">Kontak Darurat</h3>
        <p class="section-description">Kontak darurat yang bisa dihubungi (harus beda rumah)</p>
        
        <div class="emergency-contact-section">
          <div class="form-grid">
            <div class="form-group">
              <label for="namaKontakDarurat">Nama *</label>
              <input
                type="text"
                id="namaKontakDarurat"
                name="namaKontakDarurat"
                placeholder="Nama kontak darurat"
                required
              />
            </div>

            <div class="form-group">
              <label for="hubunganKandidat">Hubungan dengan Kandidat *</label>
              <select id="hubunganKandidat" name="hubunganKandidat" required>
                <option value="">Pilih hubungan</option>
                <option value="Orang Tua">Orang Tua</option>
                <option value="Saudara">Saudara</option>
                <option value="Kerabat">Kerabat</option>
                <option value="Teman">Teman</option>
                <option value="Tetangga">Tetangga</option>
              </select>
            </div>
          </div>

          <div class="form-group">
            <label for="noTelpKontakDarurat">No Telp *</label>
            <input
              type="tel"
              id="noTelpKontakDarurat"
              name="noTelpKontakDarurat"
              placeholder="Nomor telepon kontak darurat"
              required
            />
          </div>

          <div class="form-group">
            <label for="alamatKontakDarurat">Alamat *</label>
            <textarea
              id="alamatKontakDarurat"
              name="alamatKontakDarurat"
              placeholder="Alamat lengkap kontak darurat"
              required></textarea>
            <button type="button" id="getEmergencyLocationBtn" class="geolocation-btn">
              üìç Dapatkan Lokasi Kontak Darurat
            </button>
            <div id="emergencyCoordinatesInfo" class="coordinates-info" style="display: none;"></div>
          </div>

          <div class="form-group">
            <label for="fotoKKKontakDarurat">Upload Foto Kartu Keluarga Kontak Darurat *</label>
            <div class="file-upload-container">
              <input
                type="file"
                id="fotoKKKontakDarurat"
                name="fotoKKKontakDarurat"
                accept=".pdf,.jpg,.jpeg,.png"
                class="file-input"
                required
              />
              <label for="fotoKKKontakDarurat" class="file-label">
                <span class="file-icon">üë®‚Äçüë©‚Äçüëß‚Äçüë¶</span>
                <span class="file-text">Pilih foto KK kontak darurat</span>
              </label>
              <div class="file-info" id="fotoKKKontakDarurat-info"></div>
            </div>
          </div>
        </div>
      </div>

      <!-- reCAPTCHA -->
      <div class="form-group">
        <div
          class="g-recaptcha"
          data-sitekey="6LcSPkYrAAAAAA3TN5ptXfbY_nsfOOCCPXjMMESG"
        >
        </div>
        <p class="captcha-warning">
          * Jika captcha tidak muncul, silakan refresh halaman terlebih dahulu.
        </p>
      </div>

      <!-- Form Actions -->
      <div class="form-actions">
        <button type="submit" class="btn primary" id="submit-btn">
          Submit Application
        </button>
        <a href={`/freelance/${slug}`} class="btn secondary">Back to Detail</a>
      </div>

      <!-- Status Messages -->
      <div class="status" id="status"></div>
      <div
        class="submission-progress"
        id="submission-progress"
        style="display: none;"
      >
        <div class="progress-item" id="api-progress">
          <span class="progress-icon">‚è≥</span>
          <span class="progress-text">
            Submitting freelancer application and uploading documents...
          </span>
        </div>
      </div>
    </form>
  </div>
</section>

<script src="https://www.google.com/recaptcha/api.js" async defer></script>

<script>
  class FreelancerApplication {
    constructor() {
      this.form = document.getElementById("freelancer-form");
      this.submitBtn = document.getElementById("submit-btn");
      this.status = document.getElementById("status");
      this.progressContainer = document.getElementById("submission-progress");
      this.apiProgress = document.getElementById("api-progress");
      this.coordinates = null;
      this.emergencyCoordinates = null;

      this.init();
    }

    init() {
      if (!this.form || !this.submitBtn || !this.status) return;

      this.setupEventListeners();
      this.setupFileUploads();
      this.setupGeolocation();
      this.setupRealTimeValidation();
    }

    setupEventListeners() {
      this.submitBtn.addEventListener("click", (e) => {
        e.preventDefault();
        this.submitApplication();
      });

      window.addEventListener("online", () =>
        this.showStatus("Connection restored!", "success")
      );
      window.addEventListener("offline", () =>
        this.showStatus(
          "No internet connection. Please check your network.",
          "error"
        )
      );
    }

    setupFileUploads() {
      const fileInputs = ['ktp', 'kk', 'cv', 'ijazah', 'fotoKKKontakDarurat'];
      
      fileInputs.forEach(inputId => {
        const input = document.getElementById(inputId);
        const info = document.getElementById(inputId + '-info');
        
        if (input && info) {
          input.addEventListener('change', (e) => {
            this.handleFileUpload(e, info);
          });
        }
      });
    }

    handleFileUpload(e, infoElement) {
      const file = e.target.files[0];
      if (!file) {
        infoElement.textContent = '';
        return;
      }

      // Validate file size (2MB)
      if (file.size > 2 * 1024 * 1024) {
        this.showStatus('Ukuran file harus kurang dari 2MB', 'error');
        e.target.value = '';
        infoElement.textContent = '';
        return;
      }

      // Validate file type
      const allowedTypes = [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'image/jpeg',
        'image/jpg',
        'image/png',
      ];

      if (!allowedTypes.includes(file.type)) {
        this.showStatus(
          'Tipe file tidak valid. Gunakan PDF, DOC, DOCX, JPG, atau PNG',
          'error'
        );
        e.target.value = '';
        infoElement.textContent = '';
        return;
      }

      infoElement.textContent = `Dipilih: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`;
      infoElement.style.color = '#48bb78';
    }

    setupGeolocation() {
      const getLocationBtn = document.getElementById('getLocationBtn');
      const getEmergencyLocationBtn = document.getElementById('getEmergencyLocationBtn');

      if (getLocationBtn) {
        getLocationBtn.addEventListener('click', () => {
          this.getCurrentLocation('coordinates');
        });
      }

      if (getEmergencyLocationBtn) {
        getEmergencyLocationBtn.addEventListener('click', () => {
          this.getCurrentLocation('emergency');
        });
      }
    }

    getCurrentLocation(type) {
      if (!navigator.geolocation) {
        this.showStatus('Geolocation tidak didukung oleh browser ini', 'error');
        return;
      }

      const btn = type === 'emergency' ? 
        document.getElementById('getEmergencyLocationBtn') : 
        document.getElementById('getLocationBtn');
      
      const infoElement = type === 'emergency' ? 
        document.getElementById('emergencyCoordinatesInfo') : 
        document.getElementById('coordinatesInfo');

      btn.disabled = true;
      btn.textContent = 'üìç Mendapatkan lokasi...';

      navigator.geolocation.getCurrentPosition(
        (position) => {
          const coords = {
            latitude: position.coords.latitude,
            longitude: position.coords.longitude
          };

          if (type === 'emergency') {
            this.emergencyCoordinates = coords;
          } else {
            this.coordinates = coords;
          }

          infoElement.innerHTML = `
            <strong>Koordinat berhasil didapatkan:</strong><br>
            Latitude: ${coords.latitude.toFixed(6)}<br>
            Longitude: ${coords.longitude.toFixed(6)}
          `;
          infoElement.style.display = 'block';

          btn.disabled = false;
          btn.textContent = 'üìç Lokasi Berhasil Didapatkan';
          
          this.showStatus('Lokasi berhasil didapatkan!', 'success');
        },
        (error) => {
          console.error('Geolocation error:', error);
          btn.disabled = false;
          btn.textContent = type === 'emergency' ? 
            'üìç Dapatkan Lokasi Kontak Darurat' : 
            'üìç Dapatkan Lokasi Saya';
          
          let errorMessage = 'Gagal mendapatkan lokasi: ';
          switch(error.code) {
            case error.PERMISSION_DENIED:
              errorMessage += 'Izin lokasi ditolak';
              break;
            case error.POSITION_UNAVAILABLE:
              errorMessage += 'Lokasi tidak tersedia';
              break;
            case error.TIMEOUT:
              errorMessage += 'Timeout';
              break;
            default:
              errorMessage += 'Error tidak dikenal';
              break;
          }
          
          this.showStatus(errorMessage, 'error');
        },
        {
          enableHighAccuracy: true,
          timeout: 15000,
          maximumAge: 0
        }
      );
    }

    setupRealTimeValidation() {
      const inputs = this.form.querySelectorAll("input, textarea, select");
      inputs.forEach((input) => {
        input.addEventListener("focus", function () {
          this.parentElement.style.transform = "scale(1.01)";
          this.parentElement.style.transition = "transform 0.2s ease";
        });

        input.addEventListener("blur", function () {
          this.parentElement.style.transform = "scale(1)";
        });

        input.addEventListener("input", this.validateInput.bind(this));
      });
    }

    validateInput(e) {
      const input = e.target;

      if (input.hasAttribute("required") && input.value.trim() === "") {
        input.style.borderColor = "#f56565";
      } else if (input.type === "email" && input.value.trim() !== "") {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        input.style.borderColor = emailRegex.test(input.value)
          ? "#48bb78"
          : "#f56565";
      } else if (input.type === "tel" && input.value.trim() !== "") {
        const phoneRegex = /^(\+62|62|0)[0-9]{9,13}$/;
        input.style.borderColor = phoneRegex.test(
          input.value.replace(/\s|-/g, "")
        )
          ? "#48bb78"
          : "#f56565";
      } else if (input.type === "url" && input.value.trim() !== "") {
        try {
          new URL(input.value);
          input.style.borderColor = "#48bb78";
        } catch {
          input.style.borderColor = "#f56565";
        }
      } else if (input.value.trim() !== "") {
        input.style.borderColor = "#48bb78";
      } else {
        input.style.borderColor = "#e2e8f0";
      }
    }

    validateForm() {
      const requiredFields = [
        "nama", "jenisKelamin", "noTelp", "tempatTanggalLahir", 
        "alamatKTP", "alamatDomisili", "pendidikanTerakhir", "areaLowongan", "posisi",
        "namaKontakDarurat", "hubunganKandidat", "noTelpKontakDarurat", "alamatKontakDarurat"
      ];

      for (const fieldId of requiredFields) {
        const field = document.getElementById(fieldId);
        if (!field || !field.value.trim()) {
          this.showStatus(
            "Please fill in all required fields (marked with *) and upload all required documents.",
            "error"
          );
          return false;
        }
      }

      // Check required file uploads
      const requiredFiles = ['ktp', 'kk', 'cv', 'ijazah', 'fotoKKKontakDarurat'];
      for (const fileId of requiredFiles) {
        const fileInput = document.getElementById(fileId);
        if (!fileInput || !fileInput.files[0]) {
          this.showStatus(`Please upload ${fileId.toUpperCase()} file.`, "error");
          return false;
        }
      }

      // Validate phone numbers
      const phoneFields = ['noTelp', 'noTelpKontakDarurat'];
      for (const phoneId of phoneFields) {
        const phone = document.getElementById(phoneId).value.trim();
        const phoneRegex = /^(\+62|62|0)[0-9]{9,13}$/;
        if (!phoneRegex.test(phone.replace(/\s|-/g, ""))) {
          this.showStatus(
            `Please enter a valid Indonesian phone number for ${phoneId}.`,
            "error"
          );
          return false;
        }
      }

      // Validate portfolio URL if provided
      const portfolioUrl = document.getElementById("linkPortfolio").value.trim();
      if (portfolioUrl) {
        try {
          new URL(portfolioUrl);
        } catch {
          this.showStatus("Please enter a valid portfolio URL.", "error");
          return false;
        }
      }

      // Validate reCAPTCHA
      if (typeof grecaptcha !== "undefined" && !grecaptcha.getResponse()) {
        this.showStatus("Please complete the reCAPTCHA verification.", "error");
        return false;
      }

      return true;
    }

    collectFormData() {
      const formData = new FormData();

      // Personal Information
      const personalFields = [
        "nama", "jenisKelamin", "noTelp", "tempatTanggalLahir", 
        "alamatKTP", "alamatDomisili", "pendidikanTerakhir", 
        "areaLowongan", "posisi", "linkPortfolio"
      ];

      personalFields.forEach(field => {
        const element = document.getElementById(field);
        if (element) {
          formData.append(field, element.value.trim());
        }
      });

      // Emergency Contact
      const emergencyFields = [
        "namaKontakDarurat", "hubunganKandidat", "noTelpKontakDarurat", "alamatKontakDarurat"
      ];

      emergencyFields.forEach(field => {
        const element = document.getElementById(field);
        if (element) {
          formData.append(field, element.value.trim());
        }
      });

      // Add coordinates if available
      if (this.coordinates) {
        formData.append("coordinates", JSON.stringify(this.coordinates));
      }

      if (this.emergencyCoordinates) {
        formData.append("emergencyCoordinates", JSON.stringify(this.emergencyCoordinates));
      }

      // Add files
      const fileFields = ['ktp', 'kk', 'cv', 'ijazah', 'fotoKKKontakDarurat'];
      fileFields.forEach(fileId => {
        const fileInput = document.getElementById(fileId);
        if (fileInput && fileInput.files[0]) {
          formData.append(fileId, fileInput.files[0]);
        }
      });

      return formData;
    }

    async submitToAPI() {
      this.updateProgress(
        "‚è≥",
        "Submitting freelancer application and uploading documents...",
        "processing"
      );

      try {
        const formData = this.collectFormData();
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 90000); // 90 seconds for file uploads

        const response = await fetch(
          "https://qualita-indonesia.com/api/api/v1/freelancers/submit",
          {
            method: "POST",
            body: formData,
            signal: controller.signal,
          }
        );

        clearTimeout(timeoutId);

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(
            `HTTP error! status: ${response.status} - ${errorText}`
          );
        }

        const contentType = response.headers.get("content-type");
        const result =
          contentType && contentType.includes("application/json")
            ? await response.json()
            : { success: response.ok, message: await response.text() };

        if (result.success) {
          this.updateProgress(
            "‚úÖ",
            "Freelancer application submitted successfully",
            "success"
          );
          return { success: true, message: result.message };
        } else {
          throw new Error(
            result.error || result.message || "API submission failed"
          );
        }
      } catch (error) {
        this.updateProgress("‚ùå", "Application submission failed", "error");
        const errorMessage = this.handleNetworkError(error);
        return { success: false, message: errorMessage };
      }
    }

    handleNetworkError(error) {
      if (!navigator.onLine) {
        return "No internet connection. Please check your network and try again.";
      }

      if (error.name === "AbortError") {
        return "Request timeout. Please try again.";
      }

      if (
        error.code === "ECONNREFUSED" ||
        error.message.includes("ECONNREFUSED")
      ) {
        return "Server is not responding. Please try again later or contact support.";
      }

      if (error.message.includes("Failed to fetch")) {
        return "Unable to connect to server. Please check your connection and try again.";
      }

      return "Network error occurred. Please try again.";
    }

    async submitApplication() {
      if (!this.validateForm()) return;
      if (!navigator.onLine) {
        this.showStatus(
          "No internet connection. Please check your network and try again.",
          "error"
        );
        return;
      }

      this.setLoading(true);

      try {
        const result = await this.submitToAPI();

        if (result.success) {
          this.form.reset();
          // Clear file info displays
          const fileInfos = this.form.querySelectorAll('.file-info');
          fileInfos.forEach(info => info.textContent = '');
          
          // Clear coordinates
          this.coordinates = null;
          this.emergencyCoordinates = null;
          document.getElementById('coordinatesInfo').style.display = 'none';
          document.getElementById('emergencyCoordinatesInfo').style.display = 'none';
          
          if (typeof grecaptcha !== "undefined") {
            grecaptcha.reset();
          }
          this.showStatus(
            "Freelancer application submitted successfully! We'll contact you soon.",
            "success"
          );
        } else {
          this.showStatus(
            result.message ||
              "Application submission failed. Please try again.",
            "error"
          );
        }
      } catch (error) {
        this.showStatus(
          "An unexpected error occurred. Please try again.",
          "error"
        );
      } finally {
        this.setLoading(false);
      }
    }

    updateProgress(icon, text, status) {
      const iconSpan = this.apiProgress.querySelector(".progress-icon");
      const textSpan = this.apiProgress.querySelector(".progress-text");

      iconSpan.textContent = icon;
      textSpan.textContent = text;
      this.apiProgress.className = `progress-item ${status}`;
    }

    setLoading(isLoading) {
      if (isLoading) {
        this.submitBtn.disabled = true;
        this.submitBtn.innerHTML = '<span class="loading"></span>Submitting...';
        this.progressContainer.style.display = "block";
      } else {
        this.submitBtn.disabled = false;
        this.submitBtn.innerHTML = "Submit Application";
        this.progressContainer.style.display = "none";
      }
    }

    showStatus(message, type) {
      this.status.textContent = message;
      this.status.className = `status ${type}`;
      this.status.style.display = "block";

      setTimeout(() => {
        this.status.style.display = "none";
      }, 8000);
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new FreelancerApplication();
  });

  // For compatibility with view transitions
  document.addEventListener("astro:page-load", () => {
    new FreelancerApplication();
  });
</script>



<style>
  
/* Freelancer Application Form Styles */

.freelancer-application {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  min-height: 100vh;
  padding: 2rem 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, sans-serif;
}

.freelancer-application-container {
  max-width: 1000px;
  margin: 0 auto;
  padding: 0 1rem;
}

.section-title {
  text-align: center;
  margin-bottom: 3rem;
  color: white;
}

.section-title h2 {
  font-size: 3rem;
  font-weight: 700;
  margin-bottom: 1rem;
  text-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.section-title p {
  font-size: 1.2rem;
  opacity: 0.9;
  margin-bottom: 0.5rem;
}

.freelancer-form {
  background: white;
  border-radius: 20px;
  padding: 3rem;
  box-shadow: 0 25px 50px rgba(0, 0, 0, 0.15);
  animation: slideUp 0.6s ease-out;
}

@keyframes slideUp {
  from { 
    opacity: 0; 
    transform: translateY(30px); 
  }
  to { 
    opacity: 1; 
    transform: translateY(0); 
  }
}

.fade-in {
  animation: fadeIn 0.8s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; }
  to { opacity: 1; }
}

.form-section {
  margin-bottom: 3rem;
}

.section-subtitle {
  font-size: 1.5rem;
  color: #2d3748;
  margin-bottom: 1.5rem;
  padding-bottom: 0.75rem;
  border-bottom: 2px solid #e2e8f0;
  font-weight: 600;
}

.section-description {
  color: #718096;
  margin-bottom: 1.5rem;
  font-size: 0.95rem;
}

.form-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

.form-group {
  position: relative;
}

.form-group label {
  display: block;
  margin-bottom: 0.5rem;
  font-weight: 600;
  color: #4a5568;
  font-size: 0.95rem;
}

.form-group input,
.form-group select,
.form-group textarea {
  width: 100%;
  padding: 1rem;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  font-size: 1rem;
  transition: all 0.3s ease;
  background: #f7fafc;
  font-family: inherit;
}

.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus {
  outline: none;
  border-color: #667eea;
  background: white;
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.15);
}

.form-group textarea {
  min-height: 100px;
  resize: vertical;
  line-height: 1.5;
}

/* File Upload Styles */
.file-upload-container {
  position: relative;
}

.file-input {
  display: none;
}

.file-label {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1.5rem;
  border: 2px dashed #cbd5e0;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s ease;
  background: #f7fafc;
  min-height: 80px;
}

.file-label:hover {
  border-color: #667eea;
  background: #edf2f7;
  transform: translateY(-2px);
}

.file-icon {
  font-size: 2rem;
  margin-right: 1rem;
}

.file-text {
  font-weight: 500;
  color: #4a5568;
  text-align: center;
}

.file-info {
  margin-top: 0.75rem;
  font-size: 0.9rem;
  color: #48bb78;
  font-weight: 500;
  padding: 0.5rem;
  background: #f0fff4;
  border-radius: 6px;
  border: 1px solid #9ae6b4;
}

/* Geolocation Styles */
.geolocation-btn {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 10px;
  cursor: pointer;
  font-size: 0.9rem;
  font-weight: 500;
  margin-top: 0.75rem;
  transition: all 0.3s ease;
  box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
}

.geolocation-btn:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.4);
}

.geolocation-btn:disabled {
  background: #a0aec0;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.coordinates-info {
  margin-top: 1rem;
  padding: 1rem;
  background: #f0fff4;
  border: 2px solid #9ae6b4;
  border-radius: 10px;
  font-size: 0.9rem;
  color: #2f855a;
  font-weight: 500;
}

/* Emergency Contact Section */
.emergency-contact-section {
  background: #f7fafc;
  padding: 2rem;
  border-radius: 15px;
  border: 1px solid #e2e8f0;
  margin-top: 1rem;
}

.emergency-contact-section h4 {
  color: #2d3748;
  margin-bottom: 1rem;
  font-size: 1.2rem;
  font-weight: 600;
}

/* Form Notes */
.form-note {
  display: block;
  margin-top: 0.5rem;
  font-size: 0.85rem;
  color: #718096;
  font-style: italic;
  line-height: 1.4;
}

/* Buttons */
.form-actions {
  display: flex;
  gap: 1.5rem;
  justify-content: center;
  margin-top: 3rem;
  flex-wrap: wrap;
}

.btn {
  padding: 1rem 2.5rem;
  border: none;
  border-radius: 50px;
  font-size: 1.1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-width: 200px;
  font-family: inherit;
}

.btn.primary {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  box-shadow: 0 10px 25px rgba(102, 126, 234, 0.3);
}

.btn.primary:hover {
  transform: translateY(-3px);
  box-shadow: 0 15px 35px rgba(102, 126, 234, 0.4);
}

.btn.primary:disabled {
  background: #a0aec0;
  cursor: not-allowed;
  transform: none;
  box-shadow: none;
}

.btn.secondary {
  background: #edf2f7;
  color: #4a5568;
  border: 2px solid #e2e8f0;
}

.btn.secondary:hover {
  background: #e2e8f0;
  transform: translateY(-2px);
  box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
}

/* Loading Animation */
.loading {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 2px solid #ffffff33;
  border-radius: 50%;
  border-top-color: white;
  animation: spin 0.8s ease-in-out infinite;
  margin-right: 0.75rem;
}

@keyframes spin {
  to { transform: rotate(360deg); }
}

/* Status Messages */
.status {
  margin-top: 1.5rem;
  padding: 1rem 1.5rem;
  border-radius: 12px;
  font-weight: 500;
  text-align: center;
  display: none;
  animation: slideIn 0.3s ease-out;
}

@keyframes slideIn {
  from { 
    opacity: 0; 
    transform: translateY(-10px); 
  }
  to { 
    opacity: 1; 
    transform: translateY(0); 
  }
}

.status.success {
  background: #f0fff4;
  color: #2f855a;
  border: 2px solid #9ae6b4;
}

.status.error {
  background: #fed7d7;
  color: #c53030;
  border: 2px solid #feb2b2;
}

/* Progress Indicators */
.submission-progress {
  margin-top: 1.5rem;
  padding: 1rem;
  background: #f7fafc;
  border-radius: 10px;
  border: 1px solid #e2e8f0;
}

.progress-item {
  display: flex;
  align-items: center;
  padding: 0.75rem;
  border-radius: 8px;
  transition: all 0.3s ease;
}

.progress-item.processing {
  background: #fef5e7;
  color: #d69e2e;
  border: 1px solid #f6e05e;
}

.progress-item.success {
  background: #f0fff4;
  color: #2f855a;
  border: 1px solid #9ae6b4;
}

.progress-item.error {
  background: #fed7d7;
  color: #c53030;
  border: 1px solid #feb2b2;
}

.progress-icon {
  margin-right: 1rem;
  font-size: 1.2rem;
}

.progress-text {
  font-weight: 500;
}

/* reCAPTCHA */
.g-recaptcha {
  display: flex;
  justify-content: center;
  margin: 1.5rem 0;
}

.captcha-warning {
  text-align: center;
  color: #718096;
  font-size: 0.9rem;
  font-style: italic;
  margin-top: 0.5rem;
}

/* Required Field Indicator */
.form-group label::after {
  content: "";
}

.form-group label:has(+ input[required])::after,
.form-group label:has(+ select[required])::after,
.form-group label:has(+ textarea[required])::after {
  content: " *";
  color: #e53e3e;
}

/* Responsive Design */
@media (max-width: 768px) {
  .freelancer-application {
    padding: 1rem 0;
  }

  .freelancer-application-container {
    padding: 0 0.5rem;
  }

  .section-title h2 {
    font-size: 2.5rem;
  }

  .freelancer-form {
    padding: 2rem 1.5rem;
    border-radius: 15px;
  }

  .form-grid {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .btn {
    min-width: 100%;
    margin-bottom: 0.75rem;
  }

  .form-actions {
    flex-direction: column;
    gap: 1rem;
  }

  .emergency-contact-section {
    padding: 1.5rem;
  }

  .geolocation-btn {
    width: 100%;
    margin-top: 1rem;
  }
}

@media (max-width: 480px) {
  .section-title h2 {
    font-size: 2rem;
  }

  .section-title p {
    font-size: 1rem;
  }

  .freelancer-form {
    padding: 1.5rem 1rem;
  }

  .file-label {
    padding: 1rem;
    flex-direction: column;
    text-align: center;
  }

  .file-icon {
    margin-right: 0;
    margin-bottom: 0.5rem;
  }

  .form-grid {
    gap: 1rem;
  }
}

/* Accessibility Improvements */
@media (prefers-reduced-motion: reduce) {
  .freelancer-form,
  .fade-in,
  .btn,
  .geolocation-btn,
  .form-group input,
  .form-group select,
  .form-group textarea,
  .file-label {
    animation: none;
    transition: none;
  }
  
  .btn:hover,
  .geolocation-btn:hover,
  .form-group input:focus,
  .form-group select:focus,
  .form-group textarea:focus,
  .file-label:hover {
    transform: none;
  }
}

/* High Contrast Mode */
@media (prefers-contrast: high) {
  .form-group input,
  .form-group select,
  .form-group textarea {
    border-width: 3px;
  }
  
  .btn.primary {
    background: #000;
    border: 2px solid #000;
  }
  
  .btn.secondary {
    border-width: 3px;
  }
}

/* Focus Indicators */
.form-group input:focus,
.form-group select:focus,
.form-group textarea:focus,
.btn:focus,
.geolocation-btn:focus,
.file-label:focus {
  outline: 3px solid #667eea;
  outline-offset: 2px;
}

/* Print Styles */
@media print {
  .freelancer-application {
    background: white;
    padding: 0;
  }
  
  .freelancer-form {
    box-shadow: none;
    border: 1px solid #000;
  }
  
  .btn,
  .geolocation-btn,
  .submission-progress,
  .g-recaptcha {
    display: none;
  }
}
</style>