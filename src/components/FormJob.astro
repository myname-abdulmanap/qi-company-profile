---
const { slug } = Astro.props;

// Function to format slug for display (remove dashes, numbers, and capitalize)
function formatSlugForDisplay(slug) {
  return slug
    .split('-')
    .map((word) => word.replace(/\d+/g, '').trim()) // Remove numbers
    .filter((word) => word.length > 0) // Remove empty strings
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const displayText = formatSlugForDisplay(slug);
---

<section class="job-application" id="job-application">
  <div class="job-application-container">
    <div class="section-title fade-in">
      <br />
      <br />
      <h2>Job Application</h2>
      <p>Join our team at Qualita Indonesia</p>
      <p>Fill out the form below to apply for available positions</p>
    </div>

    <form class="job-form fade-in" id="job-form" enctype="multipart/form-data" data-astro-reload>
      <div class="form-grid">
        <div class="form-group">
          <label for="nama">Full Name *</label>
          <input type="text" id="nama" name="nama" placeholder="Enter your full name" required />
        </div>
        <div class="form-group">
          <label for="email">Email *</label>
          <input type="email" id="email" name="email" placeholder="Enter your email" required />
        </div>
      </div>

      <div class="form-grid">
        <div class="form-group">
          <label for="nomorTelepon">Phone Number *</label>
          <input
            type="tel"
            id="nomorTelepon"
            name="nomorTelepon"
            placeholder="e.g. +62812345678 or 08123456789"
            required
          />
        </div>
        <div class="form-group">
          <label for="posisi">Position *</label>
          <select id="posisi" name="posisi" required>
            <option value="">Select Position</option>
            <option value={slug} selected>{displayText}</option>
          </select>
        </div>
      </div>

      <div class="form-group">
        <label for="alamat">Address *</label>
        <textarea id="alamat" name="alamat" placeholder="Enter your complete address" required
        ></textarea>
      </div>

      <div class="form-group">
        <label for="cv">Upload CV/Resume *</label>
        <div class="file-upload-container">
          <input
            type="file"
            id="cv"
            name="cv"
            accept=".pdf,.doc,.docx,.jpg,.jpeg,.png"
            class="file-input"
            required
          />
          <label for="cv" class="file-label">
            <span class="file-icon">üìÑ</span>
            <span class="file-text">Choose CV file (PDF, DOC, DOCX, JPG, PNG)</span>
          </label>
          <div class="file-info" id="file-info"></div>
        </div>
        <small class="form-note"
          >Maximum file size: 2MB. Supported formats: PDF, DOC, DOCX, JPG, PNG</small
        >
      </div>

      <!-- Hidden fields untuk EmailJS -->
      <input type="hidden" name="applicant_name" id="applicant_name" />
      <input type="hidden" name="applicant_email" id="applicant_email" />
      <input type="hidden" name="phone_number" id="phone_number" />
      <input type="hidden" name="position" id="position" />
      <input type="hidden" name="address" id="address" />
      <input type="hidden" name="cv_url" id="cv_url" />
      <input type="hidden" name="cv_filename" id="cv_filename" />

      <div class="form-group">
        <div class="g-recaptcha" data-sitekey="6LcSPkYrAAAAAA3TN5ptXfbY_nsfOOCCPXjMMESG"></div>
      </div>
      <p class="captcha-warning" style="margin-top: 1rem; color: #d9534f; font-size: 0.9rem;">
        * Jika captcha tidak muncul, silakan refresh halaman terlebih dahulu.
      </p>

      <div class="form-actions">
        <button type="submit" class="btn primary" id="submit-btn">Submit Application</button>
      </div>

      <div class="form-actions">
        <a href={`/careers/${slug}`} class="btn secondary">Back to Detail</a>
      </div>

      <!-- Status dan progress -->
      <div class="status" id="status"></div>
      <div class="submission-progress" id="submission-progress" style="display: none;">
        <div class="progress-item" id="api-progress">
          <span class="progress-icon">‚è≥</span>
          <span class="progress-text">Submitting to database and uploading CV...</span>
        </div>
        <div class="progress-item" id="email-progress">
          <span class="progress-icon">‚è≥</span>
          <span class="progress-text">Sending email notification...</span>
        </div>
      </div>
    </form>
  </div>
</section>

<!-- EmailJS Script -->
<script src="https://cdn.emailjs.com/dist/email.min.js"></script>
<script src="https://www.google.com/recaptcha/api.js" async defer></script>

<script>
  document.addEventListener('DOMContentLoaded', function () {
    // Initialize EmailJS
    emailjs.init('4-iOyCns2viav_IW_');

    const form = document.getElementById('job-form');
    const submitBtn = document.getElementById('submit-btn');
    const status = document.getElementById('status');
    const fileInput = document.getElementById('cv');
    const fileInfo = document.getElementById('file-info');
    const progressContainer = document.getElementById('submission-progress');
    const apiProgress = document.getElementById('api-progress');
    const emailProgress = document.getElementById('email-progress');

    if (!form || !submitBtn || !status) {
      return;
    }

    const getApiBaseUrl = () => {
      return '/api';
    };

    // File upload handling
    fileInput.addEventListener('change', function (e) {
      const file = e.target.files[0];
      if (file) {
        // Validate file size (2MB)
        if (file.size > 2 * 1024 * 1024) {
          showStatus('File size must be less than 2MB', 'error');
          fileInput.value = '';
          fileInfo.textContent = '';
          return;
        }

        // Validate file type
        const allowedTypes = [
          'application/pdf',
          'application/msword',
          'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
          'image/jpeg',
          'image/jpg',
          'image/png',
        ];
        if (!allowedTypes.includes(file.type)) {
          showStatus(
            'Invalid file type. Please upload PDF, DOC, DOCX, JPG, or PNG files only.',
            'error',
          );
          fileInput.value = '';
          fileInfo.textContent = '';
          return;
        }

        fileInfo.textContent = `Selected: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`;
        fileInfo.style.color = '#48bb78';
      } else {
        fileInfo.textContent = '';
      }
    });

    function showStatus(message, type) {
      status.textContent = message;
      status.className = `status ${type}`;
      status.style.display = 'block';

      setTimeout(() => {
        status.style.display = 'none';
      }, 8000);
    }

    function updateProgress(element, icon, text, status) {
      const iconSpan = element.querySelector('.progress-icon');
      const textSpan = element.querySelector('.progress-text');

      iconSpan.textContent = icon;
      textSpan.textContent = text;
      element.className = `progress-item ${status}`;
    }

    function setLoading(isLoading) {
      if (isLoading) {
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<span class="loading"></span>Submitting...';
        progressContainer.style.display = 'block';
      } else {
        submitBtn.disabled = false;
        submitBtn.innerHTML = 'Submit Application';
        progressContainer.style.display = 'none';
      }
    }

    function validateForm() {
      const nama = document.getElementById('nama').value.trim();
      const email = document.getElementById('email').value.trim();
      const nomorTelepon = document.getElementById('nomorTelepon').value.trim();
      const posisi = document.getElementById('posisi').value;
      const alamat = document.getElementById('alamat').value.trim();
      const cv = document.getElementById('cv').files[0];

      // Check required fields including CV
      if (!nama || !email || !nomorTelepon || !posisi || !alamat || !cv) {
        showStatus(
          'Please fill in all required fields (marked with *) and upload your CV.',
          'error',
        );
        return false;
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        showStatus('Please enter a valid email address.', 'error');
        return false;
      }

      // Validate Indonesian phone number
      const phoneRegex = /^(\+62|62|0)[0-9]{9,13}$/;
      if (!phoneRegex.test(nomorTelepon.replace(/\s|-/g, ''))) {
        showStatus(
          'Please enter a valid Indonesian phone number (e.g., +62812345678 or 08123456789).',
          'error',
        );
        return false;
      }

      // Validate reCAPTCHA
      const recaptchaResponse = grecaptcha.getResponse();
      if (!recaptchaResponse) {
        showStatus('Please complete the reCAPTCHA verification.', 'error');
        return false;
      }

      return true;
    }

    function syncHiddenFields(apiResponseData = null) {
      document.getElementById('applicant_name').value = document.getElementById('nama').value;
      document.getElementById('applicant_email').value = document.getElementById('email').value;
      document.getElementById('phone_number').value = document.getElementById('nomorTelepon').value;
      document.getElementById('position').value = document.getElementById('posisi').value;
      document.getElementById('address').value = document.getElementById('alamat').value;

      if (apiResponseData && apiResponseData.cvUrl) {
        document.getElementById('cv_url').value = apiResponseData.cvUrl;
        document.getElementById('cv_filename').value = apiResponseData.cvFilename || '';
      } else {
        document.getElementById('cv_url').value = 'CV uploaded via API (URL not provided)';
        document.getElementById('cv_filename').value =
          document.getElementById('cv').files[0]?.name || 'CV file';
      }
    }

    // Network connectivity check
    function checkConnectivity() {
      return navigator.onLine;
    }

    // Enhanced error handling for network issues
    function handleNetworkError(error) {
      if (!checkConnectivity()) {
        return 'No internet connection. Please check your network and try again.';
      }

      if (error.name === 'AbortError') {
        return 'Request timeout. Please try again.';
      }

      if (error.code === 'ECONNREFUSED' || error.message.includes('ECONNREFUSED')) {
        return 'Server is not responding. Please try again later or contact support.';
      }

      if (error.message.includes('Failed to fetch')) {
        return 'Unable to connect to server. Please check your connection and try again.';
      }

      return 'Network error occurred. Please try again.';
    }

    // Submit ke API (dengan Cloudinary upload)
    async function submitToAPI() {
      updateProgress(apiProgress, '‚è≥', 'Submitting and uploading CV...', 'processing');

      try {
        const formData = new FormData(form);
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 60000); // 60 detik untuk upload

        const baseUrl = getApiBaseUrl();
        const endpoint = `${baseUrl}/api/v1/applicants/submit`;

        const response = await fetch(endpoint, {
          method: 'POST',
          body: formData,
          signal: controller.signal,
          headers: {
            // Don't set Content-Type for FormData, let browser handle it
          },
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const contentType = response.headers.get('content-type');
        let result;

        if (contentType && contentType.includes('application/json')) {
          result = await response.json();
        } else {
          const text = await response.text();
          result = { success: response.ok, message: text };
        }

        if (result.success) {
          updateProgress(
            apiProgress,
            '‚úÖ',
            'Saved to database and CV uploaded successfully',
            'success',
          );

          return {
            success: true,
            message: result.message,
            data: {
              cvUrl: result.cvUrl || result.data?.cvUrl || result.cv_url || '',
              cvFilename:
                result.cvFilename ||
                result.data?.cvFilename ||
                result.cv_filename ||
                document.getElementById('cv').files[0]?.name ||
                '',
            },
          };
        } else {
          throw new Error(result.error || result.message || 'API submission failed');
        }
      } catch (error) {
        updateProgress(apiProgress, '‚ùå', 'Database submission failed', 'error');
        const errorMessage = handleNetworkError(error);
        return { success: false, message: errorMessage };
      }
    }

    // Submit ke EmailJS (sebagai notifikasi)
    async function submitToEmailJS(apiResponseData = null) {
      updateProgress(emailProgress, '‚è≥', 'Sending email notification...', 'processing');

      try {
        syncHiddenFields(apiResponseData);

        // Create a temporary form element untuk EmailJS
        const tempForm = document.createElement('form');

        // Add fields to temp form
        const fieldsData = {
          applicant_name: document.getElementById('applicant_name').value,
          applicant_email: document.getElementById('applicant_email').value,
          phone_number: document.getElementById('phone_number').value,
          position: document.getElementById('position').value,
          address: document.getElementById('address').value,
          cv_url: document.getElementById('cv_url').value,
          cv_filename: document.getElementById('cv_filename').value,
          application_date: new Date().toLocaleDateString('id-ID'),
          submission_method: 'Website Form',
        };

        Object.keys(fieldsData).forEach((fieldName) => {
          const input = document.createElement('input');
          input.type = 'hidden';
          input.name = fieldName;
          input.value = fieldsData[fieldName] || '';
          tempForm.appendChild(input);
        });

        const response = await emailjs.sendForm('service_drhscig', 'template_sc48jkv', tempForm);

        updateProgress(emailProgress, '‚úÖ', 'Email notification sent', 'success');
        return { success: true, message: 'Email sent successfully' };
      } catch (error) {
        updateProgress(emailProgress, '‚ùå', 'Email notification failed', 'error');

        return {
          success: false,
          message: `Failed to send email notification: ${error.text || error.message}`,
        };
      }
    }

    // Main submission function - API first, then EmailJS
    async function submitApplication() {
      if (!validateForm()) return;
      if (!checkConnectivity()) {
        showStatus('No internet connection. Please check your network and try again.', 'error');
        return;
      }

      setLoading(true);

      try {
        // Step 1: Submit ke API dulu (upload CV + save to database)
        const apiResult = await submitToAPI();

        if (apiResult.success) {
          // Step 2: Jika API berhasil, kirim email notification
          const emailResult = await submitToEmailJS(apiResult.data);

          let finalMessage = '';
          let finalStatus = '';

          if (emailResult.success) {
            // Kedua berhasil - ideal case
            finalMessage = "Application submitted successfully! We'll contact you soon.";
            finalStatus = 'success';
          } else {
            // API berhasil, email gagal - masih OK karena data tersimpan
            finalMessage = 'Application submitted successfully! Your application has been saved.';
            finalStatus = 'success';
          }

          // Reset form hanya jika API berhasil
          form.reset();
          fileInfo.textContent = '';
          if (typeof grecaptcha !== 'undefined') {
            grecaptcha.reset();
          }

          showStatus(finalMessage, finalStatus);
        } else {
          // API gagal - tidak perlu coba email
          showStatus(
            apiResult.message || 'Application submission failed. Please try again.',
            'error',
          );
        }
      } catch (error) {
        showStatus('An unexpected error occurred. Please try again.', 'error');
      } finally {
        setLoading(false);
      }
    }

    // Event listener untuk form submit
    submitBtn.addEventListener('click', function (e) {
      e.preventDefault();
      submitApplication();
    });

    // Real-time validation feedback
    const inputs = document.querySelectorAll(
      '#job-form input, #job-form textarea, #job-form select',
    );
    inputs.forEach((input) => {
      // Focus effects
      input.addEventListener('focus', function () {
        this.parentElement.style.transform = 'scale(1.01)';
        this.parentElement.style.transition = 'transform 0.2s ease';
      });

      input.addEventListener('blur', function () {
        this.parentElement.style.transform = 'scale(1)';
      });

      // Real-time validation
      input.addEventListener('input', function () {
        if (this.hasAttribute('required') && this.value.trim() === '') {
          this.style.borderColor = '#f56565';
        } else if (this.type === 'email' && this.value.trim() !== '') {
          const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
          this.style.borderColor = emailRegex.test(this.value) ? '#48bb78' : '#f56565';
        } else if (this.type === 'tel' && this.value.trim() !== '') {
          const phoneRegex = /^(\+62|62|0)[0-9]{9,13}$/;
          this.style.borderColor = phoneRegex.test(this.value.replace(/\s|-/g, ''))
            ? '#48bb78'
            : '#f56565';
        } else if (this.value.trim() !== '') {
          this.style.borderColor = '#48bb78';
        } else {
          this.style.borderColor = '#e2e8f0';
        }
      });
    });

    // Network status monitoring
    window.addEventListener('online', function () {
      showStatus('Connection restored!', 'success');
    });

    window.addEventListener('offline', function () {
      showStatus('No internet connection. Please check your network.', 'error');
    });
  });

  // Untuk compatibility dengan view transitions
  document.addEventListener('astro:page-load', function () {
    if (typeof emailjs !== 'undefined') {
      emailjs.init('4-iOyCns2viav_IW_');
    }
  });
</script>

<style>
  .job-application {
    padding: 8rem 1rem;
    background: var(--color-contact);
  }

  .job-application-container {
    max-width: 800px;
    margin: 0 auto;
  }

  .job-form {
    margin-top: 4rem;
  }

  .form-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1.5rem;
    margin-bottom: 1.5rem;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    margin-bottom: 0.5rem;
    color: var(--text-color);
    font-weight: 500;
  }

  .form-group input,
  .form-group textarea,
  .form-group select {
    width: 100%;
    padding: 1rem;
    border: 2px solid #e2e8f0;
    border-radius: 0.5rem;
    font-size: 1rem;
    color: var(--text-color);
    transition: border-color 0.3s ease;
    background: white;
  }

  .form-group input:focus,
  .form-group textarea:focus,
  .form-group select:focus {
    outline: none;
    border-color: var(--primary);
  }

  .form-group textarea {
    height: 100px;
    resize: vertical;
  }

  .form-group select {
    cursor: pointer;
  }

  /* File upload styling */
  .file-upload-container {
    position: relative;
  }

  .file-input {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  .file-label {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 1rem;
    border: 2px dashed #e2e8f0;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    background: #f8f9fa;
  }

  .file-label:hover {
    border-color: var(--primary);
    background: #f0f8ff;
  }

  .file-icon {
    font-size: 1.5rem;
  }

  .file-text {
    color: var(--text-color);
    font-size: 0.95rem;
  }

  .file-info {
    margin-top: 0.5rem;
    font-size: 0.9rem;
    color: #666;
  }

  .form-note {
    display: block;
    margin-top: 0.5rem;
    font-size: 0.85rem;
    color: #666;
  }

  /* Submission progress */
  .submission-progress {
    margin-top: 1.5rem;
    padding: 1rem;
    background: #f8f9fa;
    border-radius: 0.5rem;
    border: 1px solid #e2e8f0;
  }

  .progress-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.5rem;
    padding: 0.5rem;
    border-radius: 0.25rem;
    transition: all 0.3s ease;
  }

  .progress-item:last-child {
    margin-bottom: 0;
  }

  .progress-item.processing {
    background: #fff3cd;
    color: #856404;
  }

  .progress-item.success {
    background: #d4edda;
    color: #155724;
  }

  .progress-item.error {
    background: #f8d7da;
    color: #721c24;
  }

  .progress-icon {
    font-size: 1rem;
    min-width: 20px;
  }

  .progress-text {
    font-size: 0.9rem;
    font-weight: 500;
  }

  /* Form actions */
  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-top: 2rem;
  }

  .btn {
    padding: 1rem 2rem;
    border: none;
    border-radius: 0.5rem;
    font-size: 1rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .btn.primary {
    background: var(--primary);
    color: white;
  }

  .btn.primary:hover {
    background: var(--primary-dark, #2563eb);
    transform: translateY(-2px);
  }

  .btn.secondary {
    background: #6b7280;
    color: white;
  }

  .btn.secondary:hover {
    background: #4b5563;
    transform: translateY(-2px);
  }

  .btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  /* Status messages */
  .status {
    margin-top: 1.5rem;
    padding: 1rem;
    border-radius: 0.5rem;
    text-align: center;
    font-weight: 500;
    display: none;
  }

  .status.success {
    background: #d4edda;
    color: #155724;
    border: 2px solid #c3e6cb;
  }

  .status.error {
    background: #f8d7da;
    color: #721c24;
    border: 2px solid #f5c6cb;
  }

  .status.warning {
    background: #fff3cd;
    color: #856404;
    border: 2px solid #ffeaa7;
  }

  /* Loading spinner */
  .loading {
    display: inline-block;
    width: 16px;
    height: 16px;
    border: 2px solid #ffffff;
    border-radius: 50%;
    border-top-color: transparent;
    animation: spin 1s ease-in-out infinite;
    margin-right: 8px;
  }

  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .form-grid {
      grid-template-columns: 1fr;
    }

    .job-application {
      padding: 4rem 1rem;
    }

    .form-actions {
      flex-direction: column;
      align-items: center;
    }

    .btn {
      width: 100%;
      max-width: 300px;
    }
  }

  @media (max-width: 480px) {
    .job-application {
      padding: 2rem 0.5rem;
    }

    .form-group input,
    .form-group textarea,
    .form-group select {
      font-size: 0.9rem;
    }
  }

  .captcha-warning {
    margin-top: 1rem;
    color: #d9534f;
    font-size: 0.9rem;
  }
</style>
