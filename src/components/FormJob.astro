---
import '../styles/formJob.css';
const { slug } = Astro.props;

function formatSlugForDisplay(slug) {
  return slug
    .split('-')
    .map((word) => word.replace(/\d+/g, '').trim())
    .filter((word) => word.length > 0)
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
}

const displayText = formatSlugForDisplay(slug);
---

<section class="job-application" id="job-application">
  <div class="job-application-container">
    <div class="section-title fade-in">
      <br />
      <br />
      <h2>Job Application</h2>
      <p>Join our team at Qualita Indonesia</p>
      <p>Fill out the form below to apply for available positions</p>
    </div>

    <form class="job-form fade-in" id="job-form" enctype="multipart/form-data" data-astro-reload>
      <!-- Personal Information -->
      <div class="form-section">
        <h3 class="section-subtitle">Personal Information</h3>
        <div class="form-grid">
          <div class="form-group">
            <label for="nama">Full Name *</label>
            <input type="text" id="nama" name="nama" placeholder="Enter your full name" required />
          </div>
          <div class="form-group">
            <label for="email">Email *</label>
            <input type="email" id="email" name="email" placeholder="Enter your email" required />
          </div>
        </div>

        <div class="form-grid">
          <div class="form-group">
            <label for="nomorTelepon">Phone Number *</label>
            <input type="tel" id="nomorTelepon" name="nomorTelepon" placeholder="e.g. +62812345678 or 08123456789" required />
          </div>
          <div class="form-group">
            <label for="tanggalLahir">Birth Date *</label>
            <input type="date" id="tanggalLahir" name="tanggalLahir" required />
          </div>
        </div>

        <div class="form-group">
          <label for="alamat">Address *</label>
          <textarea id="alamat" name="alamat" placeholder="Enter your complete address" required></textarea>
        </div>

        <div class="form-group">
          <label for="posisi">Position *</label>
          <select id="posisi" name="posisi" required>
            <option value="">Select Position</option>
            <option value={slug} selected>{displayText}</option>
          </select>
        </div>
      </div>

      <!-- Education -->
      <div class="form-section">
        <h3 class="section-subtitle">Education</h3>
        <div class="education-entry">
          <h4 class="entry-title">Latest Education *</h4>
          <div class="form-grid-3">
            <div class="form-group">
              <label for="jenjang1">Education Level *</label>
              <select id="jenjang1" name="jenjang1" required>
                <option value="">Select Level</option>\
                <option value="SD">SD</option>
                <option value="SMP">SMP</option>
                <option value="SMA/SMK">SMA/SMK</option>
                <option value="D1">D1 (Diploma 1)</option>
                <option value="D2">D2 (Diploma 2)</option>
                <option value="D3">D3 (Diploma 3)</option>
                <option value="D4">D4 (Diploma 4)</option>
                <option value="S1">S1 (Sarjana)</option>
                <option value="S2">S2 (Magister)</option>
                <option value="S3">S3 (Doktor)</option>
              </select>
            </div>
            <div class="form-group">
              <label for="jurusan1">Major/Field of Study *</label>
              <input type="text" id="jurusan1" name="jurusan1" placeholder="e.g. Teknik Informatika, Manajemen" required />
            </div>
            <div class="form-group">
              <label for="institusi1">Institution *</label>
              <input type="text" id="institusi1" name="institusi1" placeholder="e.g. Universitas Indonesia" required />
            </div>
          </div>
          <div class="form-grid">
            <div class="form-group">
              <label for="tahunMulai1">Start Year *</label>
              <input type="number" id="tahunMulai1" name="tahunMulai1" placeholder="e.g. 2014" min="1950" max="2030" required />
            </div>
            <div class="form-group">
              <label for="tahunLulus1">Graduation Year *</label>
              <input type="number" id="tahunLulus1" name="tahunLulus1" placeholder="e.g. 2018" min="1950" max="2030" required />
            </div>
          </div>
        </div>

        <div class="education-entry">
          <h4 class="entry-title">Additional Education (Optional)</h4>
          <div class="form-grid-3">
            <div class="form-group">
              <label for="jenjang2">Education Level</label>
              <select id="jenjang2" name="jenjang2">
                <option value="">Select Level</option>
                <option value="SD">SD</option>
                <option value="SMP">SMP</option>
                <option value="SMA/SMK">SMA/SMK</option>
                <option value="D1">D1 (Diploma 1)</option>
                <option value="D2">D2 (Diploma 2)</option>
                <option value="D3">D3 (Diploma 3)</option>
                <option value="D4">D4 (Diploma 4)</option>
                <option value="S1">S1 (Sarjana)</option>
                <option value="S2">S2 (Magister)</option>
                <option value="S3">S3 (Doktor)</option>
              </select>
            </div>
            <div class="form-group">
              <label for="jurusan2">Major/Field of Study</label>
              <input type="text" id="jurusan2" name="jurusan2" placeholder="e.g. Manajemen, Akuntansi" />
            </div>
            <div class="form-group">
              <label for="institusi2">Institution</label>
              <input type="text" id="institusi2" name="institusi2" placeholder="e.g. Institut Teknologi Bandung" />
            </div>
          </div>
          <div class="form-grid">
            <div class="form-group">
              <label for="tahunMulai2">Start Year</label>
              <input type="number" id="tahunMulai2" name="tahunMulai2" placeholder="e.g. 2010" min="1950" max="2030" />
            </div>
            <div class="form-group">
              <label for="tahunLulus2">Graduation Year</label>
              <input type="number" id="tahunLulus2" name="tahunLulus2" placeholder="e.g. 2014" min="1950" max="2030" />
            </div>
          </div>
        </div>
      </div>

      <!-- Work Experience -->
      <div class="form-section">
        <h3 class="section-subtitle">Work Experience *</h3>
        <div class="experience-entry">
          <h4 class="entry-title">Work Experience 1 *</h4>
          <div class="form-grid-3">
            <div class="form-group">
              <label for="jabatan1">Position *</label>
              <input type="text" id="jabatan1" name="jabatan1" placeholder="e.g. Senior Developer" required />
            </div>
            <div class="form-group">
              <label for="perusahaan1">Company *</label>
              <input type="text" id="perusahaan1" name="perusahaan1" placeholder="e.g. PT Teknologi Maju" required />
            </div>
            <div class="form-group">
              <label for="statusKerja1">Employment Status *</label>
              <select id="statusKerja1" name="statusKerja1" required>
                <option value="">Select Status</option>
                <option value="Still Working">Still Working</option>
                <option value="No Longer Working">No Longer Working</option>
              </select>
            </div>
          </div>
          <div class="form-grid">
            <div class="form-group">
              <label for="tanggalMulaiKerja1">Start Date *</label>
              <input type="date" id="tanggalMulaiKerja1" name="tanggalMulaiKerja1" required />
            </div>
            <div class="form-group">
              <label for="tanggalSelesaiKerja1">End Date</label>
              <input type="date" id="tanggalSelesaiKerja1" name="tanggalSelesaiKerja1" />
              <small class="form-note">Leave empty if still working</small>
            </div>
          </div>
        </div>

        <div class="experience-entry">
          <h4 class="entry-title">Work Experience 2 (Optional)</h4>
          <div class="form-grid-3">
            <div class="form-group">
              <label for="jabatan2">Position</label>
              <input type="text" id="jabatan2" name="jabatan2" placeholder="e.g. Junior Developer" />
            </div>
            <div class="form-group">
              <label for="perusahaan2">Company</label>
              <input type="text" id="perusahaan2" name="perusahaan2" placeholder="e.g. PT StartUp Digital" />
            </div>
            <div class="form-group">
              <label for="statusKerja2">Employment Status</label>
              <select id="statusKerja2" name="statusKerja2">
                <option value="">Select Status</option>
                <option value="Still Working">Still Working</option>
                <option value="No Longer Working">No Longer Working</option>
              </select>
            </div>
          </div>
          <div class="form-grid">
            <div class="form-group">
              <label for="tanggalMulaiKerja2">Start Date</label>
              <input type="date" id="tanggalMulaiKerja2" name="tanggalMulaiKerja2" />
            </div>
            <div class="form-group">
              <label for="tanggalSelesaiKerja2">End Date</label>
              <input type="date" id="tanggalSelesaiKerja2" name="tanggalSelesaiKerja2" />
              <small class="form-note">Leave empty if still working</small>
            </div>
          </div>
        </div>

        <div class="experience-entry">
          <h4 class="entry-title">Work Experience 3 (Optional)</h4>
          <div class="form-grid-3">
            <div class="form-group">
              <label for="jabatan3">Position</label>
              <input type="text" id="jabatan3" name="jabatan3" placeholder="e.g. Intern Developer" />
            </div>
            <div class="form-group">
              <label for="perusahaan3">Company</label>
              <input type="text" id="perusahaan3" name="perusahaan3" placeholder="e.g. PT Tech Startup" />
            </div>
            <div class="form-group">
              <label for="statusKerja3">Employment Status</label>
              <select id="statusKerja3" name="statusKerja3">
                <option value="">Select Status</option>
                <option value="Still Working">Still Working</option>
                <option value="No Longer Working">No Longer Working</option>
              </select>
            </div>
          </div>
          <div class="form-grid">
            <div class="form-group">
              <label for="tanggalMulaiKerja3">Start Date</label>
              <input type="date" id="tanggalMulaiKerja3" name="tanggalMulaiKerja3" />
            </div>
            <div class="form-group">
              <label for="tanggalSelesaiKerja3">End Date</label>
              <input type="date" id="tanggalSelesaiKerja3" name="tanggalSelesaiKerja3" />
              <small class="form-note">Leave empty if still working</small>
            </div>
          </div>
        </div>

        <small class="form-note">At least one work experience is required. Fill in Position, Company, Employment Status, and Start Date for each experience.</small>
      </div>

      <!-- Skills & Qualifications -->
      <div class="form-section">
        <h3 class="section-subtitle">Skills & Qualifications</h3>
        <div class="form-group">
          <label for="skill">Skills *</label>
          <input type="text" id="skill" name="skill" placeholder="e.g. JavaScript, Python, React, Node.js, PostgreSQL" required />
          <small class="form-note">Separate multiple skills with commas</small>
        </div>

        <div class="form-grid">
          <div class="form-group">
            <label for="sertifikasi">Certifications (Optional)</label>
            <input type="text" id="sertifikasi" name="sertifikasi" placeholder="e.g. AWS Certified Developer, Google Cloud Professional" />
            <small class="form-note">Separate multiple certifications with commas</small>
          </div>
          <div class="form-group">
            <label for="bahasa">Languages *</label>
            <input type="text" id="bahasa" name="bahasa" placeholder="e.g. Bahasa Indonesia, English, Mandarin" />
            <small class="form-note">Separate multiple languages with commas</small>
          </div>
        </div>

        <div class="form-group">
          <label for="linkedin">LinkedIn/Portfolio URL (Optional)</label>
          <input type="url" id="linkedin" name="linkedin" placeholder="https://www.linkedin.com/in/your-profile" />
        </div>
      </div>

      <!-- CV Upload -->
      <div class="form-section">
        <h3 class="section-subtitle">CV/Resume</h3>
        <div class="form-group">
          <label for="cv">Upload CV/Resume *</label>
          <div class="file-upload-container">
            <input type="file" id="cv" name="cv" accept=".pdf,.doc,.docx,.jpg,.jpeg,.png" class="file-input" required />
            <label for="cv" class="file-label">
              <span class="file-icon">📄</span>
              <span class="file-text">Choose CV file (PDF, DOC, DOCX)</span>
            </label>
            <div class="file-info" id="file-info"></div>
          </div>
          <small class="form-note">Maximum file size: 2MB. Supported formats: PDF, DOC, DOCX</small>
        </div>
      </div>

      <!-- reCAPTCHA -->
      <div class="form-group">
        <div class="g-recaptcha" data-sitekey="6LcSPkYrAAAAAA3TN5ptXfbY_nsfOOCCPXjMMESG"></div>
        <p class="captcha-warning">* Jika captcha tidak muncul, silakan refresh halaman terlebih dahulu.</p>
      </div>

      <!-- Form Actions -->
      <div class="form-actions">
        <button type="submit" class="btn primary" id="submit-btn">Submit Application</button>
        <a href={`/careers/${slug}`} class="btn secondary">Back to Detail</a>
      </div>

      <!-- Status Messages -->
      <div class="status" id="status"></div>
      <div class="submission-progress" id="submission-progress" style="display: none;">
        <div class="progress-item" id="api-progress">
          <span class="progress-icon">⏳</span>
          <span class="progress-text">Submitting application and uploading CV...</span>
        </div>
      </div>
    </form>
  </div>
</section>

<script src="https://www.google.com/recaptcha/api.js" async defer></script>

<script>
  class JobApplication {
    constructor() {
      this.form = document.getElementById('job-form');
      this.submitBtn = document.getElementById('submit-btn');
      this.status = document.getElementById('status');
      this.fileInput = document.getElementById('cv');
      this.fileInfo = document.getElementById('file-info');
      this.progressContainer = document.getElementById('submission-progress');
      this.apiProgress = document.getElementById('api-progress');

      this.init();
    }

    init() {
      if (!this.form || !this.submitBtn || !this.status) return;

      this.setupEventListeners();
      this.setupFileUpload();
      this.setupRealTimeValidation();
      this.setupEmploymentStatusHandlers();
    }

    setupEventListeners() {
      this.submitBtn.addEventListener('click', (e) => {
        e.preventDefault();
        this.submitApplication();
      });

      window.addEventListener('online', () => this.showStatus('Connection restored!', 'success'));
      window.addEventListener('offline', () => this.showStatus('No internet connection. Please check your network.', 'error'));
    }

    setupFileUpload() {
      this.fileInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (!file) {
          this.fileInfo.textContent = '';
          return;
        }

        // Validate file size (2MB)
        if (file.size > 2 * 1024 * 1024) {
          this.showStatus('File size must be less than 2MB', 'error');
          this.fileInput.value = '';
          this.fileInfo.textContent = '';
          return;
        }

        // Validate file type
        const allowedTypes = ['application/pdf', 'application/msword', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'image/jpeg', 'image/jpg', 'image/png'];
        if (!allowedTypes.includes(file.type)) {
          this.showStatus('Invalid file type. Please upload PDF, DOC, DOCX, JPG, or PNG files only.', 'error');
          this.fileInput.value = '';
          this.fileInfo.textContent = '';
          return;
        }

        this.fileInfo.textContent = `Selected: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)} MB)`;
        this.fileInfo.style.color = '#48bb78';
      });
    }

    setupRealTimeValidation() {
      const inputs = this.form.querySelectorAll('input, textarea, select');
      inputs.forEach((input) => {
        input.addEventListener('focus', function() {
          this.parentElement.style.transform = 'scale(1.01)';
          this.parentElement.style.transition = 'transform 0.2s ease';
        });

        input.addEventListener('blur', function() {
          this.parentElement.style.transform = 'scale(1)';
        });

        input.addEventListener('input', this.validateInput.bind(this));
      });
    }

    setupEmploymentStatusHandlers() {
      document.querySelectorAll('select[id^="statusKerja"]').forEach((statusSelect) => {
        statusSelect.addEventListener('change', function() {
          const index = this.id.replace('statusKerja', '');
          const endDateField = document.getElementById(`tanggalSelesaiKerja${index}`);
          
          if (endDateField) {
            if (this.value === 'Still Working') {
              endDateField.value = '';
              endDateField.disabled = true;
              endDateField.style.backgroundColor = '#f5f5f5';
            } else {
              endDateField.disabled = false;
              endDateField.style.backgroundColor = 'white';
            }
          }
        });
      });
    }

    validateInput(e) {
      const input = e.target;
      
      if (input.hasAttribute('required') && input.value.trim() === '') {
        input.style.borderColor = '#f56565';
      } else if (input.type === 'email' && input.value.trim() !== '') {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        input.style.borderColor = emailRegex.test(input.value) ? '#48bb78' : '#f56565';
      } else if (input.type === 'tel' && input.value.trim() !== '') {
        const phoneRegex = /^(\+62|62|0)[0-9]{9,13}$/;
        input.style.borderColor = phoneRegex.test(input.value.replace(/\s|-/g, '')) ? '#48bb78' : '#f56565';
      } else if (input.value.trim() !== '') {
        input.style.borderColor = '#48bb78';
      } else {
        input.style.borderColor = '#e2e8f0';
      }
    }

    validateForm() {
      const requiredFields = ['nama', 'email', 'nomorTelepon', 'posisi', 'alamat', 'tanggalLahir', 'jenjang1', 'jurusan1', 'institusi1', 'tahunMulai1', 'tahunLulus1', 'jabatan1', 'perusahaan1', 'statusKerja1', 'tanggalMulaiKerja1', 'skill'];
      
      for (const fieldId of requiredFields) {
        const field = document.getElementById(fieldId);
        if (!field || !field.value.trim()) {
          this.showStatus('Please fill in all required fields (marked with *) and upload your CV.', 'error');
          return false;
        }
      }

      // Check CV upload
      if (!this.fileInput.files[0]) {
        this.showStatus('Please upload your CV.', 'error');
        return false;
      }

      // Validate email
      const email = document.getElementById('email').value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        this.showStatus('Please enter a valid email address.', 'error');
        return false;
      }

      // Validate phone
      const phone = document.getElementById('nomorTelepon').value.trim();
      const phoneRegex = /^(\+62|62|0)[0-9]{9,13}$/;
      if (!phoneRegex.test(phone.replace(/\s|-/g, ''))) {
        this.showStatus('Please enter a valid Indonesian phone number (e.g., +62812345678 or 08123456789).', 'error');
        return false;
      }

      // Validate years
      const currentYear = new Date().getFullYear();
      const startYear = parseInt(document.getElementById('tahunMulai1').value);
      const graduationYear = parseInt(document.getElementById('tahunLulus1').value);
      
      if (startYear < 1950 || startYear > currentYear + 10 || graduationYear < 1950 || graduationYear > currentYear + 10) {
        this.showStatus('Please enter valid education years.', 'error');
        return false;
      }
      
      if (startYear >= graduationYear) {
        this.showStatus('Graduation year must be after start year.', 'error');
        return false;
      }

      // Validate work dates
      const startWorkDate = new Date(document.getElementById('tanggalMulaiKerja1').value);
      const endWorkDate = document.getElementById('tanggalSelesaiKerja1').value;
      
      if (endWorkDate && startWorkDate >= new Date(endWorkDate)) {
        this.showStatus('Work end date must be after start date.', 'error');
        return false;
      }

      // Validate reCAPTCHA
      if (typeof grecaptcha !== 'undefined' && !grecaptcha.getResponse()) {
        this.showStatus('Please complete the reCAPTCHA verification.', 'error');
        return false;
      }

      return true;
    }

    formatDateToDDMMYYYY(dateString) {
      if (!dateString) return '';
      const [year, month, day] = dateString.split('-');
      return `${day}-${month}-${year}`;
    }

    formatDuration(startDate, endDate) {
      if (!startDate) return '';
      
      const start = new Date(startDate);
      const end = endDate ? new Date(endDate) : new Date();
      
      const startYear = start.getFullYear();
      const endYear = end.getFullYear();
      
      const months = (endYear - startYear) * 12 + (end.getMonth() - start.getMonth());
      const years = Math.floor(months / 12);
      const remainingMonths = months % 12;
      
      let duration = endDate ? `${startYear} - ${endYear}` : `${startYear} - Present`;
      
      if (years > 0 || remainingMonths > 0) {
        let periodText = ' (';
        if (years > 0) {
          periodText += `${years} year${years > 1 ? 's' : ''}`;
          if (remainingMonths > 0) periodText += ` ${remainingMonths} month${remainingMonths > 1 ? 's' : ''}`;
        } else {
          periodText += `${remainingMonths} month${remainingMonths > 1 ? 's' : ''}`;
        }
        periodText += ')';
        duration += periodText;
      }
      
      return duration;
    }

    collectFormData() {
      const formData = new FormData();
      
      // Personal Information
      formData.append('nama', document.getElementById('nama').value.trim());
      formData.append('email', document.getElementById('email').value.trim());
      formData.append('alamat', document.getElementById('alamat').value.trim());
      formData.append('nomorTelepon', document.getElementById('nomorTelepon').value.trim());
      formData.append('posisi', document.getElementById('posisi').value);
      formData.append('tanggalLahir', this.formatDateToDDMMYYYY(document.getElementById('tanggalLahir').value.trim()));

      // Skills and optional fields
      formData.append('skill', document.getElementById('skill').value.trim());
      formData.append('sertifikasi', document.getElementById('sertifikasi').value.trim());
      formData.append('bahasa', document.getElementById('bahasa').value.trim());
      formData.append('linkedin', document.getElementById('linkedin').value.trim());

      // Education
      let pendidikanTerakhir = '';
      for (let i = 1; i <= 2; i++) {
        const jenjang = document.getElementById(`jenjang${i}`)?.value || '';
        const jurusan = document.getElementById(`jurusan${i}`)?.value?.trim() || '';
        const institusi = document.getElementById(`institusi${i}`)?.value?.trim() || '';
        const tahunMulai = document.getElementById(`tahunMulai${i}`)?.value?.trim() || '';
        const tahunLulus = document.getElementById(`tahunLulus${i}`)?.value?.trim() || '';

        if (jenjang && jurusan && institusi && tahunMulai && tahunLulus) {
          const eduDuration = `${tahunMulai} - ${tahunLulus} (${tahunLulus - tahunMulai} years)`;
          const eduEntry = `${jenjang} ${jurusan} - ${institusi} - ${eduDuration}`;
          pendidikanTerakhir += (pendidikanTerakhir ? '; ' : '') + eduEntry;
        }
      }
      formData.append('pendidikanTerakhir', pendidikanTerakhir);

      // Work Experience
      let pengalamanKerja = '';
      for (let i = 1; i <= 3; i++) {
        const jabatan = document.getElementById(`jabatan${i}`)?.value?.trim() || '';
        const perusahaan = document.getElementById(`perusahaan${i}`)?.value?.trim() || '';
        const statusKerja = document.getElementById(`statusKerja${i}`)?.value || '';
        const tanggalMulai = document.getElementById(`tanggalMulaiKerja${i}`)?.value?.trim() || '';
        const tanggalSelesai = document.getElementById(`tanggalSelesaiKerja${i}`)?.value?.trim() || '';

        if (jabatan && perusahaan && statusKerja && tanggalMulai) {
          const workDuration = this.formatDuration(tanggalMulai, tanggalSelesai);
          const workEntry = `${jabatan} - ${perusahaan} - ${workDuration}`;
          pengalamanKerja += (pengalamanKerja ? '; ' : '') + workEntry;
        }
      }
      formData.append('pengalamanKerja', pengalamanKerja);

      // Add CV file
      const cvFile = this.fileInput.files[0];
      if (cvFile) {
        formData.append('cv', cvFile);
      }

      return formData;
    }

    async submitToAPI() {
      this.updateProgress('⏳', 'Submitting application and uploading CV...', 'processing');

      try {
        const formData = this.collectFormData();
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 60000);

        const response = await fetch('http://localhost:4000/api/v1/applicants/submit', {
          method: 'POST',
          body: formData,
          signal: controller.signal,
        });

        clearTimeout(timeoutId);

        if (!response.ok) {
          const errorText = await response.text();
          throw new Error(`HTTP error! status: ${response.status} - ${errorText}`);
        }

        const contentType = response.headers.get('content-type');
        const result = contentType && contentType.includes('application/json') 
          ? await response.json() 
          : { success: response.ok, message: await response.text() };

        if (result.success) {
          this.updateProgress('✅', 'Application submitted successfully', 'success');
          return { success: true, message: result.message };
        } else {
          throw new Error(result.error || result.message || 'API submission failed');
        }
      } catch (error) {
        this.updateProgress('❌', 'Application submission failed', 'error');
        const errorMessage = this.handleNetworkError(error);
        return { success: false, message: errorMessage };
      }
    }

    handleNetworkError(error) {
      if (!navigator.onLine) {
        return 'No internet connection. Please check your network and try again.';
      }

      if (error.name === 'AbortError') {
        return 'Request timeout. Please try again.';
      }

      if (error.code === 'ECONNREFUSED' || error.message.includes('ECONNREFUSED')) {
        return 'Server is not responding. Please try again later or contact support.';
      }

      if (error.message.includes('Failed to fetch')) {
        return 'Unable to connect to server. Please check your connection and try again.';
      }

      return 'Network error occurred. Please try again.';
    }

    async submitApplication() {
      if (!this.validateForm()) return;
      if (!navigator.onLine) {
        this.showStatus('No internet connection. Please check your network and try again.', 'error');
        return;
      }

      this.setLoading(true);

      try {
        const result = await this.submitToAPI();

        if (result.success) {
          this.form.reset();
          this.fileInfo.textContent = '';
          if (typeof grecaptcha !== 'undefined') {
            grecaptcha.reset();
          }
          this.showStatus("Application submitted successfully! We'll contact you soon.", 'success');
        } else {
          this.showStatus(result.message || 'Application submission failed. Please try again.', 'error');
        }
      } catch (error) {
        this.showStatus('An unexpected error occurred. Please try again.', 'error');
      } finally {
        this.setLoading(false);
      }
    }

    updateProgress(icon, text, status) {
      const iconSpan = this.apiProgress.querySelector('.progress-icon');
      const textSpan = this.apiProgress.querySelector('.progress-text');

      iconSpan.textContent = icon;
      textSpan.textContent = text;
      this.apiProgress.className = `progress-item ${status}`;
    }

    setLoading(isLoading) {
      if (isLoading) {
        this.submitBtn.disabled = true;
        this.submitBtn.innerHTML = '<span class="loading"></span>Submitting...';
        this.progressContainer.style.display = 'block';
      } else {
        this.submitBtn.disabled = false;
        this.submitBtn.innerHTML = 'Submit Application';
        this.progressContainer.style.display = 'none';
      }
    }

    showStatus(message, type) {
      this.status.textContent = message;
      this.status.className = `status ${type}`;
      this.status.style.display = 'block';

      setTimeout(() => {
        this.status.style.display = 'none';
      }, 8000);
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new JobApplication();
  });

  // For compatibility with view transitions
  document.addEventListener('astro:page-load', () => {
    new JobApplication();
  });
</script>



